name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Lint and Test
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run security audit
      run: npm run audit:security
      
    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-results
        path: report/security-audit-report.json

  # Performance Audit
  performance:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance audit
      run: npm run audit:performance
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-audit-results
        path: report/performance-audit-report.json

  # Accessibility Audit
  accessibility:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run accessibility audit
      run: npm run audit:accessibility
      
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-audit-results
        path: report/accessibility-audit-report.json

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security, performance, accessibility]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          bin/
          src/
          package.json
          README.md
          LICENSE

  # E2E Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-results
        path: report/

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security, performance, accessibility, e2e]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download all audit results
      uses: actions/download-artifact@v3
      with:
        path: report/
        
    - name: Run quality gates
      run: |
        # Check if critical security issues exist
        if [ -f "report/security-audit-report.json" ]; then
          CRITICAL_ISSUES=$(node -e "
            const data = JSON.parse(require('fs').readFileSync('report/security-audit-report.json'));
            console.log(data.criticalIssues || 0);
          ")
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "❌ Critical security issues found: $CRITICAL_ISSUES"
            exit 1
          fi
        fi
        
        # Check if high severity issues exceed threshold
        if [ -f "report/security-audit-report.json" ]; then
          HIGH_ISSUES=$(node -e "
            const data = JSON.parse(require('fs').readFileSync('report/security-audit-report.json'));
            console.log(data.highIssues || 0);
          ")
          if [ "$HIGH_ISSUES" -gt 10 ]; then
            echo "❌ Too many high severity issues: $HIGH_ISSUES"
            exit 1
          fi
        fi
        
        echo "✅ Quality gates passed"

  # Publish to NPM
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality-gates, publish]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Create Release Assets
      run: |
        mkdir -p release-assets
        cp -r artifacts/build-artifacts/* release-assets/
        cp -r artifacts/security-audit-results/* release-assets/
        cp -r artifacts/performance-audit-results/* release-assets/
        cp -r artifacts/accessibility-audit-results/* release-assets/
        
    - name: Upload Release Assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/

  # Notify Team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [quality-gates, publish]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.quality-gates.result == 'success' && needs.publish.result == 'success'
      run: |
        echo "✅ Release successful!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Notify on Failure
      if: needs.quality-gates.result == 'failure' || needs.publish.result == 'failure'
      run: |
        echo "❌ Release failed!"
        # Add notification logic here (Slack, email, etc.) 